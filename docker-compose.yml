# Run command: docker-compose -f docker-compose.prod.yml up -d
# Stop command: docker-compose -f docker-compose.prod.yml stop
# Destroy command: docker-compose -f docker-compose.prod.yml down -v
version: '3.8'
services:
  mysql-docker:
    image: mysql:8.0
    container_name: mysql-docker
    ports:
      - "3306:3306" #<local-port>:<container-port>
    volumes:
      - mysql-docker-data:/var/lib/mysql
      - mysql-docker-config-deamond:/etc/mysql/conf.d
      - ./dump_playmusic.sql:/docker-entrypoint-initdb.d
    networks:
      - backend
    environment:
      MYSQL_USER: lam
      MYSQL_PASSWORD: 870124zxc
      MYSQL_ROOT_PASSWORD: 870124zxc
      MYSQL_DATABASE: dbmusic
    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --init-connect='SET NAMES UTF8;' --innodb-flush-log-at-trx-commit=0
    restart: unless-stopped
  
  music_player_docker:
    image: levidocker123/music_player_docker:latest
    container_name: music_player_docker
    ports:
      - 8080:8080
    volumes:
      - musicplayer-data:/tmp
      - images_data:/images
    depends_on:
      - mysql-docker
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-docker:3306/dbmusic?useUnicode=yes&characterEncoding=UTF-8
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 870124zxc
    networks:
      - backend
    restart: always

  react-playmusic-app:
    image: levidocker123/react-playmusic-app:latest # REACT_APP_API_URL=http://localhost:8080/api/
    container_name: react-playmusic-app
    depends_on:
      - music_player_docker
    ports:
      - 8081:80
    restart: always
#create network
networks:
  backend:
    name: musicplayer-network
volumes:
  mysql-docker-data:
  mysql-docker-config-deamond:
  musicplayer-data:
  images_data:
